plugins {
    id "java-library"
}


version "0.1"
group "sql"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    implementation project(':server')

    compileOnly 'org.projectlombok:lombok:1.18.10'
    compileOnly 'jakarta.persistence:jakarta.persistence-api:2.2.2'

    annotationProcessor "org.projectlombok:lombok:1.18.10"
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "io.micronaut.data:micronaut-data-processor:1.0.0.M5"

    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation 'io.micronaut.configuration:micronaut-flyway'

    // Using jpa since jdbc-data is not stable enough.
    implementation "javax.annotation:javax.annotation-api"
    compile 'io.micronaut.data:micronaut-data-hibernate-jpa:1.0.0.M5'
    runtime 'io.micronaut.configuration:micronaut-jdbc-hikari'

    runtime 'org.xerial:sqlite-jdbc:3.16.1'
    runtime 'com.h2database:h2'
    runtime 'org.postgresql:postgresql:42.2.8'

    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"

    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"

    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.assertj:assertj-core:3.11.1"
}

test.classpath += configurations.developmentOnly

// use JUnit 5 platform
test {
    useJUnitPlatform()
}
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}